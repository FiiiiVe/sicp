#lang sicp
(load ".\\sicp.scm")


(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (next item) (cddr item))
    (define (prev item) (car item))
    (define (val item) (cdar item))
    (define (set-item-next! a b)
      (set-cdr! (cdr a) b))
    (define (set-item-prev! a b)
      (set-car! a b))
    (define (empty-queue?) (null? front-ptr))
    (define (front-insert-queue! item)
      (let ((new-pair (list nil item)))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               front-ptr)
              (else
               (set-item-next! new-pair front-ptr)
               (set-item-prev! front-ptr new-pair)
               (set-front-ptr! new-pair)
               front-ptr))))
    (define (rear-insert-queue! item)
      (let ((new-pair (list nil item)))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               front-ptr)
              (else
               (set-item-next! rear-ptr new-pair)
               (set-item-prev! new-pair rear-ptr)
               (set-rear-ptr! new-pair)
               front-ptr))))
    (define (front-delete-queue!)
      (cond ((empty-queue?) (error "empty queue"))
            (else
             (let ((new-front (cdr front-ptr)))
               (set-item-next! front-ptr nil)
               (if (not (null? new-front))
                   (set-item-prev! new-front nil))
               (set-front-ptr! new-front))
             front-ptr)))
    (define (rear-delete-queue!)
      (cond ((empty-queue?) (error "empty queue"))
            (else
             (let ((new-front (cdr front-ptr)))
               (set-item-next! front-ptr nil)
               (if (not (null? new-front))
                   (set-item-prev! new-front nil))
               (set-front-ptr! new-front))
             front-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'set-front-ptr!) set-front-ptr!)
            ((eq? m 'set-rear-ptr!) set-rear-ptr!)
            ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-insert-queue!) front-insert-queue!)
            ((eq? m 'rear-insert-queue!) rear-insert-queue!)
            ((eq? m 'front-delete-queue!) (front-delete-queue!))
            ((eq? m 'rear-delete-queue!) (rear-delete-queue!))
            (else (error "command not support"))))
    dispatch))


(define q1 (make-queue))
((q1 'rear-insert-queue!) 'a)
((q1 'rear-insert-queue!) 'b)
(q1 'front-delete-queue!)
(q1 'front-delete-queue!)
(define (print-queue queue)
  (queue 'front-ptr))
(print-queue q1)
