#lang sicp
(load ".\\sicp.scm")

;; 为什么new-pair 不能用(list nil item),而要用(list item nil)
;; 因为如果用第一种会导致先prev从而无法遍历到item，会永远回到prev，无法遍历，但list可以正常维护。。。。
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (next item) (cdr item))
    (define (prev item) (cadr (car item)))
    (define (val item) (car item))
    (define (set-item-next! a b)
      (set-cdr! a b))
    (define (set-item-prev! a b)
      (set-cdr! (car a) b))
    (define (make-item v) (cons (cons v nil) nil))
    (define (empty-queue?) (null? front-ptr))
    (define (front-insert-queue! item)
      (let ((new-pair (make-item item)))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               front-ptr)
              (else
               (set-item-next! new-pair front-ptr)
               (set-item-prev! front-ptr new-pair)
               (set-front-ptr! new-pair)
               front-ptr))))
    (define (rear-insert-queue! item)
      (let ((new-pair (make-item item)))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               front-ptr)
              (else
               (set-item-next! rear-ptr new-pair)
               (set-item-prev! new-pair rear-ptr)
               (set-rear-ptr! new-pair)
               front-ptr))))
    (define (front-delete-queue!)
      (cond ((empty-queue?) (error "empty queue"))
            (else
             (let ((new-front (next front-ptr)))
               (set-item-next! front-ptr nil)
               (if (not (null? new-front))
                   (set-item-prev! new-front nil))
               (set-front-ptr! new-front))
             front-ptr)))
    (define (rear-delete-queue!)
      (cond ((empty-queue?) (error "empty queue"))
            (else
             (let ((new-rear (prev rear-ptr)))
               (display new-rear)
               (set-item-prev! rear-ptr nil)
               (if (not (null? new-rear))
                   (set-item-next! new-rear nil))
               (set-rear-ptr! new-rear))
             front-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'item) (car (car front-ptr)))
            ((eq? m 'next) (next front-ptr))
            ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'set-front-ptr!) set-front-ptr!)
            ((eq? m 'set-rear-ptr!) set-rear-ptr!)
            ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-insert-queue!) front-insert-queue!)
            ((eq? m 'rear-insert-queue!) rear-insert-queue!)
            ((eq? m 'front-delete-queue!) (front-delete-queue!))
            ((eq? m 'rear-delete-queue!) (rear-delete-queue!))
            (else (error "command not support"))))
    dispatch))


(define (print-queue queue-fron)
  (define (iter q)
    (if (null? q)
        (begin
        (display "end")(newline)(newline)
        )
        (begin
          (display (car (car q)))
          (newline)
          (iter (cdr q)))))
  (iter queue-fron)
  
  ;;(display " ")
  )
(define q1 (make-queue))
((q1 'rear-insert-queue!) 'a)
(print-queue (q1 'front-ptr))
((q1 'front-insert-queue!) 'b)
(print-queue (q1 'front-ptr))
((q1 'front-insert-queue!) 'b)
(print-queue (q1 'front-ptr))
(q1 'rear-delete-queue!)
(print-queue (q1 'front-ptr))
(q1 'front-delete-queue!)
(print-queue (q1 'front-ptr))
(q1 'front-delete-queue!)
(print-queue (q1 'front-ptr))
